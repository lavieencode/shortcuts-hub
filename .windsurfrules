1. Always use the sh-debug.php code to log instead of error_log. When logging an error, always include the source file and line number of the originating error in the log. When logging information, such as an API call, always include as much detail as possible in a single log. The immediate benefit of this special logging functionality is that we can load it with as much info as we want in a single log, including full API requests AND responses.

2. Whenever you use the debug logging mentioned in #1, always include a comment above it describing the purpose of the log, and what we're looking for. It should always start with "// DEBUG:", followed by the logging description.

3. Set the "debug" key in new log data objects to "true" to enable them for logging. When I ask you to disable these logs, set it to "false".

4. When using sh_debug_log(), always structure the data in the following format:

   - First parameter: A brief, descriptive title for the log entry
   - Second parameter: An array/object containing:
     a. 'message': Detailed description of what's being logged
     b. 'source': Array containing:
        - 'file': Current file name
        - 'line': Current line number
        - 'function': Current function name
     c. 'data': Array containing the actual debug data
     d. 'debug': Set to true to enable logging
   
   Example:
   sh_debug_log('URL parameters check', array(
       'message' => 'Checking URL parameters',
       'source' => array(
           'file' => __FILE__,
           'line' => __LINE__,
           'function' => __FUNCTION__
       ),
       'data' => array(
           'view' => $view,
           'id' => $id
       ),
       'debug' => true
   ));

5. WordPress AJAX and Localization Rule
When implementing WordPress AJAX functionality and script localization, follow these core principles:

Script Naming and Structure
Use namespaced script handles following the pattern {plugin-prefix}-{feature}-{purpose} consistently across the entire plugin. For example:

php
CopyInsert
// Good
wp_enqueue_script('shortcuts-hub-versions-handlers', $script_url, array('jquery'));

// Bad
wp_enqueue_script('versions-handlers-script', $script_url);
Data Structure and Localization
Create ONE localization object for the entire plugin that includes ALL possible data every script might need. For our plugin:

php
CopyInsert
$shortcuts_hub_data = array(
    'ajax_url' => admin_url('admin-ajax.php'),
    'nonces' => array(
        'fetch_versions' => wp_create_nonce('fetch_versions_nonce'),
        'delete_version' => wp_create_nonce('delete_version_nonce'),
        'update_version' => wp_create_nonce('update_version_nonce')
    ),
    'strings' => array(
        'confirm_delete' => esc_html__('Are you sure you want to delete this version?', 'shortcuts-hub'),
        'version_deleted' => esc_html__('Version deleted successfully', 'shortcuts-hub')
    ),
    'debug' => defined('WP_DEBUG') && WP_DEBUG
);

wp_localize_script('shortcuts-hub-versions-handlers', 'shortcutsHubData', $shortcuts_hub_data);
AJAX Implementation
In your JavaScript files, use the localized data consistently:

javascript
CopyInsert
jQuery.ajax({
    url: shortcutsHubData.ajax_url,
    type: 'POST',
    data: {
        action: 'fetch_versions',
        shortcut_id: shortcutId,
        nonce: shortcutsHubData.nonces.fetch_versions
    },
    success: function(response) {
        if (response.success) {
            displayVersions(response.data);
        }
    }
});
And verify in PHP handlers:

php
CopyInsert
function fetch_versions() {
    check_ajax_referer('fetch_versions_nonce', 'nonce');
    
    $shortcut_id = isset($_POST['shortcut_id']) ? sanitize_text_field($_POST['shortcut_id']) : '';
    
    if (empty($shortcut_id)) {
        wp_send_json_error(array('message' => 'No shortcut ID provided'));
        return;
    }

    // Process request and send response
    wp_send_json_success($data);
}
Common Pitfalls to Avoid
Multiple localizations of shortcutsHubData across different scripts
Missing nonce verifications in AJAX handlers
Inconsistent script handles (mixing 'versions-script' with 'shortcuts-hub-versions')
Undefined data in shortcutsHubData object
Missing jQuery dependencies
Security Considerations
Always verify nonces, sanitize all input, escape all output, and use appropriate capabilities checks:

php
CopyInsert
// In PHP handlers
if (!current_user_can('edit_posts')) {
    wp_send_json_error(array('message' => 'Insufficient permissions'));
    return;
}

// Escape all output
echo esc_html($version_title);
wp_send_json_success(array(
    'title' => esc_html($title),
    'content' => wp_kses_post($content)
));
Following these guidelines ensures consistent data access, prevents undefined errors, maintains security, and simplifies debugging across the entire Shortcuts Hub plugin.